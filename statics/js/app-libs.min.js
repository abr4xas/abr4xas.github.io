/**
 * resume - Mi CV usando angularJs
 * @author Angel Cruz <me@abr4xas.org> (http://abr4xas.org)
 * @version v1.0.0
 * @link 
 */

(function () {
    'use strict';
    angular
        .module('cvapp', ['ui.router', 'ngResource', 'cvJson']);
})();

(function () {
    'use strict';
    angular
        .module('cvJson', [])
        .factory('GetHomeFactory', GetHomeService)
        .factory('GetSocialFactory', GetSocialService);

    GetHomeService.$injector = ['$resource'];
    GetSocialService.$injector = ['$resource'];

    // Datos basicos
    function GetHomeService($resource) {
        return $resource('cv.json');
    }
    // Redes sociales
    function GetSocialService($resource) {
        return $resource('cv.json');
    }
})();
/**
* Controlador de la aplicación
*/

(function () {
    'use strict';
    angular
        .module('cvapp')
        .controller('homeCtrl', Home)
        .controller('socialCtrl', Social);

    Home.$inject = ['GetHomeFactory'];
    Social.$inject = ['GetSocialFactory'];


    // Datos basicos
    function Home(GetHomeFactory) {
        var vm = this;
        vm.dataHome = [];
        vm.loading = true;
        execute();
        function execute() {
            return new GetHome();
        }
        function GetHome() {
            return GetHomeFactory.get(function (data) {
                vm.dataHome = data.basics;
                vm.dataHome;
                vm.loading = false;
            }, function (e) {
                vm.loading = false;
            });
        }
    }
    // Redes sociales
    function Social(GetSocialFactory) {
        var vm = this;
        vm.dataSocial = [];
        execute();
        function execute() {
            return new GetSocial();
        }
        function GetSocial() {
            return GetSocialFactory.get(function (data) {
                vm.dataSocial = data.basics;
                vm.dataSocial;

                console.log(vm.dataSocial.profiles);

            }, function (e) {
                // TODO
            });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('cvapp')
        .config(routes)
        .run(removerCache);

    // Inyectando dependencias.
    routes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];

    /**
     * @description gestiona las rutas de la aplicación.
     * @param $stateProvider
     * @param $urlRouterProvider
     */
    function routes($stateProvider, $urlRouterProvider, $locationProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider
            .state('home', {
                url: '/',
                views: {
                    menu: {
                        controller: 'socialCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/home/menu_tpl.html'
                    },
                    home: {
                        controller: 'homeCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/home/home_tpl.html'
                    }
                }
            });
        $locationProvider.html5Mode(false);
    } // End routes

    // Inyectando dependencias.
    removerCache.$inject = ['$rootScope', '$templateCache'];
    /**
     * @description Remueve el cache al detectar que un cambio de ruta comienza.
     * @param $rootScope
     * @param $templateCache
     */
    function removerCache($rootScope, $templateCache) {
        $rootScope.$on('$routeChangeStart', function (event, next, current) {
            if (typeof (current) !== 'undefined') {
                $templateCache.remove(current.templateUrl);
            }
        });
    } // End removerCache

})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN2YXBwLm1vZHVsZS5qcyIsImN2YXBwLnNlcnZpY2UuanMiLCJjdmFwcC5jb250cm9sbGVyLmpzIiwiY3ZhcHAucm91dGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC1saWJzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnY3ZhcHAnLCBbJ3VpLnJvdXRlcicsICduZ1Jlc291cmNlJywgJ2N2SnNvbiddKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2N2SnNvbicsIFtdKVxuICAgICAgICAuZmFjdG9yeSgnR2V0SG9tZUZhY3RvcnknLCBHZXRIb21lU2VydmljZSlcbiAgICAgICAgLmZhY3RvcnkoJ0dldFNvY2lhbEZhY3RvcnknLCBHZXRTb2NpYWxTZXJ2aWNlKTtcblxuICAgIEdldEhvbWVTZXJ2aWNlLiRpbmplY3RvciA9IFsnJHJlc291cmNlJ107XG4gICAgR2V0U29jaWFsU2VydmljZS4kaW5qZWN0b3IgPSBbJyRyZXNvdXJjZSddO1xuXG4gICAgLy8gRGF0b3MgYmFzaWNvc1xuICAgIGZ1bmN0aW9uIEdldEhvbWVTZXJ2aWNlKCRyZXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gJHJlc291cmNlKCdjdi5qc29uJyk7XG4gICAgfVxuICAgIC8vIFJlZGVzIHNvY2lhbGVzXG4gICAgZnVuY3Rpb24gR2V0U29jaWFsU2VydmljZSgkcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnY3YuanNvbicpO1xuICAgIH1cbn0pKCk7IiwiLyoqXG4qIENvbnRyb2xhZG9yIGRlIGxhIGFwbGljYWNpw7NuXG4qL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2N2YXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2hvbWVDdHJsJywgSG9tZSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NvY2lhbEN0cmwnLCBTb2NpYWwpO1xuXG4gICAgSG9tZS4kaW5qZWN0ID0gWydHZXRIb21lRmFjdG9yeSddO1xuICAgIFNvY2lhbC4kaW5qZWN0ID0gWydHZXRTb2NpYWxGYWN0b3J5J107XG5cblxuICAgIC8vIERhdG9zIGJhc2ljb3NcbiAgICBmdW5jdGlvbiBIb21lKEdldEhvbWVGYWN0b3J5KSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmRhdGFIb21lID0gW107XG4gICAgICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICBleGVjdXRlKCk7XG4gICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdldEhvbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBHZXRIb21lKCkge1xuICAgICAgICAgICAgcmV0dXJuIEdldEhvbWVGYWN0b3J5LmdldChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZtLmRhdGFIb21lID0gZGF0YS5iYXNpY3M7XG4gICAgICAgICAgICAgICAgdm0uZGF0YUhvbWU7XG4gICAgICAgICAgICAgICAgdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZWRlcyBzb2NpYWxlc1xuICAgIGZ1bmN0aW9uIFNvY2lhbChHZXRTb2NpYWxGYWN0b3J5KSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmRhdGFTb2NpYWwgPSBbXTtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBHZXRTb2NpYWwoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBHZXRTb2NpYWwoKSB7XG4gICAgICAgICAgICByZXR1cm4gR2V0U29jaWFsRmFjdG9yeS5nZXQoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5kYXRhU29jaWFsID0gZGF0YS5iYXNpY3M7XG4gICAgICAgICAgICAgICAgdm0uZGF0YVNvY2lhbDtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLmRhdGFTb2NpYWwucHJvZmlsZXMpO1xuXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2N2YXBwJylcbiAgICAgICAgLmNvbmZpZyhyb3V0ZXMpXG4gICAgICAgIC5ydW4ocmVtb3ZlckNhY2hlKTtcblxuICAgIC8vIElueWVjdGFuZG8gZGVwZW5kZW5jaWFzLlxuICAgIHJvdXRlcy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInXTtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBnZXN0aW9uYSBsYXMgcnV0YXMgZGUgbGEgYXBsaWNhY2nDs24uXG4gICAgICogQHBhcmFtICRzdGF0ZVByb3ZpZGVyXG4gICAgICogQHBhcmFtICR1cmxSb3V0ZXJQcm92aWRlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdXRlcygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVudToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvY2lhbEN0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2hvbWUvbWVudV90cGwuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaG9tZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hvbWVDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9ob21lL2hvbWVfdHBsLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKGZhbHNlKTtcbiAgICB9IC8vIEVuZCByb3V0ZXNcblxuICAgIC8vIElueWVjdGFuZG8gZGVwZW5kZW5jaWFzLlxuICAgIHJlbW92ZXJDYWNoZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR0ZW1wbGF0ZUNhY2hlJ107XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlbXVldmUgZWwgY2FjaGUgYWwgZGV0ZWN0YXIgcXVlIHVuIGNhbWJpbyBkZSBydXRhIGNvbWllbnphLlxuICAgICAqIEBwYXJhbSAkcm9vdFNjb3BlXG4gICAgICogQHBhcmFtICR0ZW1wbGF0ZUNhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlckNhY2hlKCRyb290U2NvcGUsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgbmV4dCwgY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VycmVudCkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlQ2FjaGUucmVtb3ZlKGN1cnJlbnQudGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IC8vIEVuZCByZW1vdmVyQ2FjaGVcblxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
