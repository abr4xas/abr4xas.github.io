/**
 * resume - Mi CV usando angularJs
 * @author Angel Cruz <me@abr4xas.org> (http://abr4xas.org)
 * @version v1.0.0
 * @link 
 */

(function () {
    'use strict';
    angular
        .module('cvapp', ['ui.router', 'ngResource', 'cvJson']);
})();

(function () {
    'use strict';
    angular
        .module('cvJson', [])
        .factory('GetHomeFactory', GetHomeService)
        .factory('GetSocialFactory', GetSocialService);

    GetHomeService.$injector = ['$resource'];
    GetSocialService.$injector = ['$resource'];

    // Datos basicos
    function GetHomeService($resource) {
        return $resource('cv.json');
    }
    // Redes sociales
    function GetSocialService($resource) {
        return $resource('cv.json');
    }
})();
/**
* Controlador de la aplicación
*/

(function () {
    'use strict';
    angular
        .module('cvapp')
        .controller('homeCtrl', Home)
        .controller('socialCtrl', Social);

    Home.$inject = ['GetHomeFactory'];
    Social.$inject = ['GetSocialFactory'];


    // Datos basicos
    function Home(GetHomeFactory) {
        var vm = this;
        vm.dataHome = [];
        vm.loading = true;
        execute();
        function execute() {
            return new GetHome();
        }
        function GetHome() {
            return GetHomeFactory.get(function (data) {
                vm.dataHome = data.basics;
                vm.dataHome;
                vm.loading = false;
            }, function (e) {
                vm.loading = false;
            });
        }
    }
    // Redes sociales
    function Social(GetSocialFactory) {
        var vm = this;
        vm.dataSocial = [];
        execute();
        function execute() {
            return new GetSocial();
        }
        function GetSocial() {
            return GetSocialFactory.get(function (data) {
                vm.dataSocial = data.basics.profiles;
                vm.dataSocial;
                vm.social = [];

                angular.forEach(vm.dataSocial, function (value, key) {
                    vm.social.push(key + ': ' + value);
                });


                console.log(data.basics.profiles);
            }, function (e) {
                // TODO
            });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('cvapp')
        .config(routes)
        .run(removerCache);

    // Inyectando dependencias.
    routes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];

    /**
     * @description gestiona las rutas de la aplicación.
     * @param $stateProvider
     * @param $urlRouterProvider
     */
    function routes($stateProvider, $urlRouterProvider, $locationProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider
            .state('home', {
                url: '/',
                views: {
                    menu: {
                        controller: 'socialCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/home/menu_tpl.html'
                    },
                    home: {
                        controller: 'homeCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/home/home_tpl.html'
                    }
                }
            });
        $locationProvider.html5Mode(false);
    } // End routes

    // Inyectando dependencias.
    removerCache.$inject = ['$rootScope', '$templateCache'];
    /**
     * @description Remueve el cache al detectar que un cambio de ruta comienza.
     * @param $rootScope
     * @param $templateCache
     */
    function removerCache($rootScope, $templateCache) {
        $rootScope.$on('$routeChangeStart', function (event, next, current) {
            if (typeof (current) !== 'undefined') {
                $templateCache.remove(current.templateUrl);
            }
        });
    } // End removerCache

})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN2YXBwLm1vZHVsZS5qcyIsImN2YXBwLnNlcnZpY2UuanMiLCJjdmFwcC5jb250cm9sbGVyLmpzIiwiY3ZhcHAucm91dGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAtbGlicy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2N2YXBwJywgWyd1aS5yb3V0ZXInLCAnbmdSZXNvdXJjZScsICdjdkpzb24nXSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjdkpzb24nLCBbXSlcbiAgICAgICAgLmZhY3RvcnkoJ0dldEhvbWVGYWN0b3J5JywgR2V0SG9tZVNlcnZpY2UpXG4gICAgICAgIC5mYWN0b3J5KCdHZXRTb2NpYWxGYWN0b3J5JywgR2V0U29jaWFsU2VydmljZSk7XG5cbiAgICBHZXRIb21lU2VydmljZS4kaW5qZWN0b3IgPSBbJyRyZXNvdXJjZSddO1xuICAgIEdldFNvY2lhbFNlcnZpY2UuJGluamVjdG9yID0gWyckcmVzb3VyY2UnXTtcblxuICAgIC8vIERhdG9zIGJhc2ljb3NcbiAgICBmdW5jdGlvbiBHZXRIb21lU2VydmljZSgkcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnY3YuanNvbicpO1xuICAgIH1cbiAgICAvLyBSZWRlcyBzb2NpYWxlc1xuICAgIGZ1bmN0aW9uIEdldFNvY2lhbFNlcnZpY2UoJHJlc291cmNlKSB7XG4gICAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2N2Lmpzb24nKTtcbiAgICB9XG59KSgpOyIsIi8qKlxuKiBDb250cm9sYWRvciBkZSBsYSBhcGxpY2FjacOzblxuKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjdmFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdob21lQ3RybCcsIEhvbWUpXG4gICAgICAgIC5jb250cm9sbGVyKCdzb2NpYWxDdHJsJywgU29jaWFsKTtcblxuICAgIEhvbWUuJGluamVjdCA9IFsnR2V0SG9tZUZhY3RvcnknXTtcbiAgICBTb2NpYWwuJGluamVjdCA9IFsnR2V0U29jaWFsRmFjdG9yeSddO1xuXG5cbiAgICAvLyBEYXRvcyBiYXNpY29zXG4gICAgZnVuY3Rpb24gSG9tZShHZXRIb21lRmFjdG9yeSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5kYXRhSG9tZSA9IFtdO1xuICAgICAgICB2bS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBHZXRIb21lKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gR2V0SG9tZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBHZXRIb21lRmFjdG9yeS5nZXQoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5kYXRhSG9tZSA9IGRhdGEuYmFzaWNzO1xuICAgICAgICAgICAgICAgIHZtLmRhdGFIb21lO1xuICAgICAgICAgICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVkZXMgc29jaWFsZXNcbiAgICBmdW5jdGlvbiBTb2NpYWwoR2V0U29jaWFsRmFjdG9yeSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5kYXRhU29jaWFsID0gW107XG4gICAgICAgIGV4ZWN1dGUoKTtcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2V0U29jaWFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gR2V0U29jaWFsKCkge1xuICAgICAgICAgICAgcmV0dXJuIEdldFNvY2lhbEZhY3RvcnkuZ2V0KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0uZGF0YVNvY2lhbCA9IGRhdGEuYmFzaWNzLnByb2ZpbGVzO1xuICAgICAgICAgICAgICAgIHZtLmRhdGFTb2NpYWw7XG4gICAgICAgICAgICAgICAgdm0uc29jaWFsID0gW107XG5cbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uZGF0YVNvY2lhbCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uc29jaWFsLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5iYXNpY3MucHJvZmlsZXMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjdmFwcCcpXG4gICAgICAgIC5jb25maWcocm91dGVzKVxuICAgICAgICAucnVuKHJlbW92ZXJDYWNoZSk7XG5cbiAgICAvLyBJbnllY3RhbmRvIGRlcGVuZGVuY2lhcy5cbiAgICByb3V0ZXMuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJ107XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gZ2VzdGlvbmEgbGFzIHJ1dGFzIGRlIGxhIGFwbGljYWNpw7NuLlxuICAgICAqIEBwYXJhbSAkc3RhdGVQcm92aWRlclxuICAgICAqIEBwYXJhbSAkdXJsUm91dGVyUHJvdmlkZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lbnU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzb2NpYWxDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9ob21lL21lbnVfdHBsLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhvbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdob21lQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi90ZW1wbGF0ZXMvaG9tZS9ob21lX3RwbC5odG1sJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZShmYWxzZSk7XG4gICAgfSAvLyBFbmQgcm91dGVzXG5cbiAgICAvLyBJbnllY3RhbmRvIGRlcGVuZGVuY2lhcy5cbiAgICByZW1vdmVyQ2FjaGUuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckdGVtcGxhdGVDYWNoZSddO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZW11ZXZlIGVsIGNhY2hlIGFsIGRldGVjdGFyIHF1ZSB1biBjYW1iaW8gZGUgcnV0YSBjb21pZW56YS5cbiAgICAgKiBAcGFyYW0gJHJvb3RTY29wZVxuICAgICAqIEBwYXJhbSAkdGVtcGxhdGVDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZXJDYWNoZSgkcm9vdFNjb3BlLCAkdGVtcGxhdGVDYWNoZSkge1xuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIG5leHQsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGN1cnJlbnQpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnJlbW92ZShjdXJyZW50LnRlbXBsYXRlVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSAvLyBFbmQgcmVtb3ZlckNhY2hlXG5cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
